### kernel functions

function horner(x::T, coeffs::Dict{Symbol,Vector{S}}, poly::Symbol) where {T,S}
    cs = coeffs[poly]
    result = zero(promote_type(T,S))
    for i in length(cs):-1:1
        result = result * x + cs[i]
    end
    result
end

function (::ConvolutionKernel{3})(s::T) where {T} # original paper, 3 equation 4th order accurate cubic
    s_abs = abs(s)
    coefs = Dict(
        :eq1 => [1, 0, -7/3, 4/3],
        :eq2 => [15/6, -59/12, 3, -7/12],
        :eq3 => [-3/2, 21/12, -2/3, 1/12]
    )
    if s_abs < 1.0
        return horner(s_abs, coefs, :eq1)
    elseif s_abs < 2.0
        return horner(s_abs, coefs, :eq2)
    elseif s_abs < 3.0
        return horner(s_abs, coefs, :eq3)
    else
        return 0.0
    end
end

function (::ConvolutionKernel{5})(s::T) where {T} # 5 equations 7th order accurate quintic
    s_abs = abs(s)
    coef = Dict(
        # 5 equation quintic, 7th order accurate
        :eq1 => [1, 0, -731/384, 0, 11423/7680, -4483/7680], 
        :eq2 => [2597/3840, 16931/7680, -14371/1920, 25933/3840, -6337/2560, 313/960], 
        :eq3 => [1211/256, -96221/7680, 4549/384, -20011/3840, 1675/1536, -169/1920], 
        :eq4 => [1681/1280, -7843/15360, -1463/3840, 2071/7680, -439/7680, 21/5120],
        :eq5 => [-3625/768, 5075/1024, -1595/768, 667/1536, -29/640, 29/15360]
    )
    if s_abs < 1.0
        return horner(s_abs, coef, :eq1)
    elseif s_abs < 2.0
        return horner(s_abs, coef, :eq2)
    elseif s_abs < 3.0
        return horner(s_abs, coef, :eq3)
    elseif s_abs < 4.0
        return horner(s_abs, coef, :eq4)
    elseif s_abs < 5.0
        return horner(s_abs, coef, :eq5)
    else
        return 0.0
    end
end


function (::ConvolutionKernel{7})(s::T) where {T} # 7th order accurate 7th degree
    s_abs = abs(s)
    coef = Dict(
        # 6 equation sextic, 7th order accurate
        :eq1 => [1, 0, -1173431/624240, 0, 922243/749088, 0, -7587149/14981760, 258097/1664640],
        :eq2 => [106117/124848, 834167/1248480, -1709177/624240, -119839/249696, 2712769/749088, -214769/83232, 11023027/14981760, -384481/4993920], 
        :eq3 => [30587/2448, -35785081/1248480, 376423/15606, -126025/14688, 794957/1498176, 13571/27744, -796241/5992704, 105457/9987840], 
        :eq4 => [-2861771/41616, 325209229/2496960, -129943051/1248480, 22764947/499392, -17736439/1498176, 303937/166464, -4645469/29963520, 167719/29963520],
        :eq5 => [9845663/124848, -908278361/7490880, 99126901/1248480, -14343661/499392, 9292729/1498176, -399533/499392, 1710679/29963520, -52123/29963520], 
        :eq6 => [9711/1156, -29133/2890, 119769/23120, -20501/13872, 14027/55488, -1079/41616, 44239/29963520, -1079/29963520]
    )
    if s_abs < 1.0
        return horner(s_abs, coef, :eq1)
    elseif s_abs < 2.0
        return horner(s_abs, coef, :eq2)
    elseif s_abs < 3.0
        return horner(s_abs, coef, :eq3)
    elseif s_abs < 4.0
        return horner(s_abs, coef, :eq4)
    elseif s_abs < 5.0
        return horner(s_abs, coef, :eq5)
    elseif s_abs < 6.0
        return horner(s_abs, coef, :eq6)
    else
        return 0.0
    end
end

function (::ConvolutionKernel{9})(s::T) where {T} # 7 equation 7th order accurate 9th degree
    s_abs = abs(s)
    coef = Dict(
        # 7 equation nonic, 7th order accurate
        :eq1 => [1, 0, -1228311859/656862720, 0, 2374505273/1970588160, 0, -818196437/1970588160, 0, 11829761099/110352936960, -2979600563/110352936960], 
        :eq2 => [238388010589/220705873920, -266459153773/441411747840, 33401029/444971520, -10854702749/3152941056, 24832219889/5254901760, -59181928697/31529410560, -204568201/788235264, 44456683841/110352936960, -24478472857/220705873920, 648090097/63058821120],
        :eq3 => [-911311341191/44141174784, 111463951723961/1324235243520, -1187668128659/8276470272, 6325760530637/47294115840, -713586937963/9458823168, 2538867747637/94588231680, -14292057925/2364705792, 274967867411/331058810880, -1041166915/16552940544, 2612454491/1324235243520], 
        :eq4 => [970127058913/3941176320, -217673366380741/331058810880, 9070101940039/11823528960, -6072819678061/11823528960, 2575198645663/11823528960, -1436772883673/23647057920, 26408492351/2364705792, -108098000287/82764702720, 8353063619/94588231680, -83024333/31529410560], 
        :eq5 => [-1626189980101/5517646848, 207656344018747/331058810880, -16150575419141/27588234240, 3723217994899/11823528960, -141514262681/1313725440, 575297062439/23647057920, -14311579063/3941176320, 28613426497/82764702720, -4207843949/220705873920, 61488029/132423524352], 
        :eq6 => [-14928448356433/44141174784, 708641710840613/1324235243520, -15536126370899/41382351360, 7250268307721/47294115840, -1899309134641/47294115840, 662137232881/94588231680, -9601065439/11823528960, 20014122263/331058810880, -867848161/331058810880, 3181151/63058821120], 
        :eq7 => [-230820161411/31529410560, 362717396503/37835292672, -32974308773/5911764480, 89501695241/47294115840, -19515407233/47294115840, 5671965649/94588231680, -13733573/2364705792, 17096897/47294115840, -280277/21358632960, 280277/1324235243520]
    )
    if s_abs < 1.0
        return horner(s_abs, coef, :eq1)
    elseif s_abs < 2.0
        return horner(s_abs, coef, :eq2)
    elseif s_abs < 3.0
        return horner(s_abs, coef, :eq3)
    elseif s_abs < 4.0
        return horner(s_abs, coef, :eq4)
    elseif s_abs < 5.0
        return horner(s_abs, coef, :eq5)
    elseif s_abs < 6.0
        return horner(s_abs, coef, :eq6)
    elseif s_abs < 7.0
        return horner(s_abs, coef, :eq7)
    else
        return 0.0
    end
end


function (::ConvolutionKernel{11})(s::T) where {T} # 8 equation 7th order accurate 11th degree
    s_abs = abs(s)
    coef = Dict(
        # 8 equation 11th degree, 7th order accurate
        :eq1 => [1, 0, -1474545903118565939/792228434572753920, 0, 78507043213210069/66019036214396160, 0, -12670369340107457/31437636292569600, 0, 46165786466951987/528152289715169280, 0, -1979989382272480301/126756549531640627200, 12125765928110303/3621615700904017920], 
        :eq2 => [46688025415070421283/47533706074365235200, 611754868632362851/3521015264767795200, -12454722519126817579/4753370607436523520, 1763170764321368369/905403925226004480, -360348012477965893/176050763238389760, 8167009247425360189/2263509813065011200, -873960348562623487/282938726633126400, 266121542973409453/211260915886067712, -675120327792804377/3168913738291015680, -183362958223076599/19013482429746094080, 1047951963907767427/126756549531640627200, -311721508838343637/380269648594921881600],
        :eq3 => [290789554778345414497/15844568691455078400, -1176286025464014790457/13581058878390067200, 914864288891214509429/4753370607436523520, -326860792073164279381/1267565495316406272, 356420440040563131203/1584456869145507840, -299498596129286544419/2263509813065011200, 279727167851339131/5239606048761600, -46925594811500374541/3168913738291015680, 880436123772301723/316891373829101568, -6412971600229340729/19013482429746094080, 9103327328716715587/380269648594921881600, -287163581109902653/380269648594921881600],
        :eq4 => [-97624152288495515653/282938726633126400, 28487486459475436646677/23766853037182617600, -1270466651679226806229/679052943919503360, 2736179354334916916131/1584456869145507840, -59178644728015058323/56587745326625280, 246848921284187478049/565877453266252800, -2682038553642224969/20958424195046400, 4187717595896072111/158445686914550784, -1707133950733157057/452701962613002240, 3369716421265306457/9506741214873047040, -1074497928967420859/54324235513560268800, 188990552404159519/380269648594921881600],
        :eq5 => [-91686872256601949/573247781890560, 584032665663098652419/3395264719597516800, 93995742861929057039/1584456869145507840, -65298785669132272249/316891373829101568, 7187902958433605347/44012690809597440, -4519515363364915111/62875272585139200, 3826511287881600271/188625817755417600, -607682890871518961/158445686914550784, 513414309069248863/1056304579430338560, -378248565674872117/9506741214873047040, 80587128202093921/42252183177213542400, -3100113788719121/76053929718984376320],
        :eq6 => [11400592501538893097803/3168913738291015680, -678700264659088852966643/95067412148730470400, 30492761304819166077367/4753370607436523520, -624031058955709345303/181080785045200896, 1948924850418375808117/1584456869145507840, -693426374210262490871/2263509813065011200, 854130808285056533/15718818146284800, -4351077069530586469/633782747658203136, 468519144160859/773660580637455, -675477219960947609/19013482429746094080, 474432619668728489/380269648594921881600, -1511433282576589/76053929718984376320],
        :eq7 => [1629996666173636922641/2263509813065011200, -111462464545403697599219/95067412148730470400, 4119729807398281352407/4753370607436523520, -2433650625602123990309/6337827476582031360, 179520527300474443621/1584456869145507840, -52918948738542222743/2263509813065011200, 108230575125344359/31437636292569600, -32757522364242595/90540392522600448, 84273445110240251/3168913738291015680, -24758575515423287/19013482429746094080, 14536864713060107/380269648594921881600, -193847014686169/380269648594921881600],
        :eq8 => [6324204691423232/1657844101365975, -20553665247125504/3868302903187275, 7806440165975552/2320981741912365, -197631396606976/154732116127491, 3087990571984/9551365193055, -31651903362836/552614700455325, 16018951092167/2210458801821300, -192999410749/294727840242840, 3280989982733/79222843457275392, -8298974662207/4753370607436523520, 5596982911721/126756549531640627200, -192999410749/380269648594921881600],
    )
    if s_abs < 1.0
        return horner(s_abs, coef, :eq1)
    elseif s_abs < 2.0
        return horner(s_abs, coef, :eq2)
    elseif s_abs < 3.0
        return horner(s_abs, coef, :eq3)
    elseif s_abs < 4.0
        return horner(s_abs, coef, :eq4)
    elseif s_abs < 5.0
        return horner(s_abs, coef, :eq5)
    elseif s_abs < 6.0
        return horner(s_abs, coef, :eq6)
    elseif s_abs < 7.0
        return horner(s_abs, coef, :eq7)
    elseif s_abs < 8.0
        return horner(s_abs, coef, :eq8)
    else
        return 0.0
    end
end

function (::ConvolutionKernel{13})(s::T) where {T} # 9 equation 7th order accurate 13th degree
    s_abs = abs(s)
    coef = Dict(
        # 9 equation 13th degree, 7th order accurate
        :eq1 => [1, 0, -233897035492111437890065099/126221390981941024641024000, 0, 17788490377132697716959371/15146566917832922956922880, 0, -8293459294227499908492377/21036898496990170773504000, 0, 354325326269456148134099/4207379699398034154700800, 0, -4807165549308589758830773/378664172945823073923072000, 0, 1519344351524992181772629/908794015069975377415372800, -1418790757468981675699093/4543970075349876887076864000],
        :eq2 => [50613472575568833492039361/50488556392776409856409600, -133342636863000096230219053/4543970075349876887076864000, -641424436546902044283386429/378664172945823073923072000, -394988157134006264829060203/757328345891646147846144000, 1055685813492244762741064191/454397007534987688707686400, -180631987462207306088390327/100977112785552819712819200, 102162567161575066677745727/63110695490970512320512000, -621355403220054266396722661/378664172945823073923072000, 261486087663448936075100027/252442781963882049282048000, -37727874347674666927943743/100977112785552819712819200, 84902804393864665887947281/1135992518837469221769216000, -5249666821644521664205883/757328345891646147846144000, 37091575133925116467711/4543970075349876887076864000, 74024897674224287111867/2271985037674938443538432000],
        :eq3 => [-21021620039663738616608492681/2776870601602702542102528000, 862051525357507526835894397531/16661223609616215252615168000, -604559531174912997854108318879/4165305902404053813153792000, 20256200889069934686960779821/84147593987960683094016000, -123619542831428614066725286657/454397007534987688707686400, 1375576546092075522134366557/6233155110219309858816000, -8229045074223212334754332161/63110695490970512320512000, 7094891800798793895454777993/126221390981941024641024000, -4443123584106178489231369877/252442781963882049282048000, 399240085889563762230131329/100977112785552819712819200, -705300598731301408996773067/1135992518837469221769216000, 59942506742050660650834119/925623533867567514034176000, -201719186827489470440266789/49983670828848645757845504000, 2845811190755937376710101/24991835414424322878922752000],
        :eq4 => [334906805384711287660670622593/1388435300801351271051264000, -17201891028016993023599563555619/16661223609616215252615168000, 4239262510840732735694001521/2082652951202026906576896, -323274878701980142255062979/132515896044032571801600, 448485289983987629482797141643/227198503767493844353843200, -55677834506781867570081827/49079961497789841408000, 7497818626025360748965368501/15777673872742628080128000, -18525549718273961768095354469/126221390981941024641024000, 843721140885835873078016053/25244278196388204928204800, -560052449398784134677127529/100977112785552819712819200, 185357168645531758764263921/283998129709367305442304000, -143399089483700249769001913/2776870601602702542102528000, 1521464673118076884659833/617082355911711676022784000, -335627461895166824008123/6247958853606080719730688000],
        :eq5 => [293431563792453258867088137071/92562353386756751403417600, -40712451022429148096047060271323/4543970075349876887076864000, 1001308537169392643455991539727/86777206300084454440704000, -1357491803175198521957013991333/151465669178329229569228800, 70930336512850699771913620933/15146566917832922956922880, -877458070721152787735736405613/504885563927764098564096000, 2478198627393879155865894119/5259224624247542693376000, -1430968581273168947009191559/15146566917832922956922880, 117800660366432859484728551/8414759398796068309401600, -152770290073413957519095657/100977112785552819712819200, 10957774247219162132614831/94666043236455768480768000, -9871619891224876898544191/1666122360961621525261516800, 54915011981898069294023/302931338356658459138457600, -31132179355920180495601/12495917707212161439461376000],
        :eq6 => [-834707894926452225238801534609/50488556392776409856409600, 60323999743777997669150491628309/1514656691783292295692288000, -16690125187601711201854772180339/378664172945823073923072000, 499406031991970193852870407213/16829518797592136618803200, -1232472140802656600497906165027/90879401506997537741537280, 9232390593152807608239121659/2077718370073103286272000, -67786604803108399290172942447/63110695490970512320512000, 979314640937110037981457397/5048855639277640985640960, -1321508821921863124191664319/50488556392776409856409600, 263267335748512938419413093/100977112785552819712819200, -211711878688746410877930653/1135992518837469221769216000, 5028832731485534542990853/555374120320540508420505600, -81205124981331340024091/302931338356658459138457600, 91285849843422904758497/24991835414424322878922752000],
        :eq7 => [-40225018804681360485735555428647/2776870601602702542102528000, 42936674811339821436200793019157/1514656691783292295692288000, -106433815038097767621974370801649/4165305902404053813153792000, 1182215586048281505607011601633/84147593987960683094016000, -2388960733231249738210057847471/454397007534987688707686400, 587639394278562828827541759/415543674014620657254400, -17753879527700647379243433391/63110695490970512320512000, 1057930297756513660628988233/25244278196388204928204800, -27449549191566750938140321/5870762371253070913536000, 38966470745453864358720421/100977112785552819712819200, -26016511583378503415177417/1135992518837469221769216000, 285585030350710432772857/308541177955855838011392000, -20751936750544412701343/908794015069975377415372800, 6490792092500998343093/24991835414424322878922752000],
        :eq8 => [-1366775057811351286662352319657/1388435300801351271051264000, 164000579820505502264749917018449/99967341657697291515691008000, -10505670262813228383390009541717/8330611804808107626307584000, 896785875081435267108915798929/1514656691783292295692288000, -86072688984739925458992321163/454397007534987688707686400, 44036249394016775834440956373/1009771127855528197128192000, -938260671542678010097291453/126221390981941024641024000, 719329635935554540334161079/757328345891646147846144000, -5741939713059060583529687/63110695490970512320512000, 1303144074110333230375633/201954225571105639425638400, -748298177206643163553241/2271985037674938443538432000, 190895252076452690410651/16661223609616215252615168000, -12169792331309819217461/49983670828848645757845504000, 238628301401465989867/99967341657697291515691008000],
        :eq9 => [-7563393699495435136498419/5713725517701034037248000, 17647918632156015318496311/9141960828321654459596800, -14846661706416965267941341/11427451035402068074496000, 1110127744644734649664377/2077718370073103286272000, -31125076952656111672833/207771837007310328627200, 125653088438500598975511/4155436740146206572544000, -469651366912506486147/103885918503655164313600, 526578805326143635983/1038859185036551643136000, -11069224135985001357/259714796259137910784000, 6618107552202672769/2493262044087723943526400, -1112779145945582147/9349732665328964788224000, 1347048439828862599/370249413547027005613670400, -1698452380653783277/24991835414424322878922752000, 58567323470820113/99967341657697291515691008000]
    )
    if s_abs < 1.0
        return horner(s_abs, coef, :eq1)
    elseif s_abs < 2.0
        return horner(s_abs, coef, :eq2)
    elseif s_abs < 3.0
        return horner(s_abs, coef, :eq3)
    elseif s_abs < 4.0
        return horner(s_abs, coef, :eq4)
    elseif s_abs < 5.0
        return horner(s_abs, coef, :eq5)
    elseif s_abs < 6.0
        return horner(s_abs, coef, :eq6)
    elseif s_abs < 7.0
        return horner(s_abs, coef, :eq7)
    elseif s_abs < 8.0
        return horner(s_abs, coef, :eq8)
    elseif s_abs < 9.0
        return horner(s_abs, coef, :eq9)
    else
        return 0.0
    end
end

# mapping degree => number of equations
const DEGREE_TO_EQUATIONS = Dict(
    3 => 3,
    5 => 5,
    7 => 6,
    9 => 7,
    11 => 8,
    13 => 9
)

function get_equations_for_degree(degree::Integer)
    haskey(DEGREE_TO_EQUATIONS, degree) || throw(ArgumentError("Degree $degree not supported. Supported degrees: $(sort(collect(keys(DEGREE_TO_EQUATIONS))))"))
    return DEGREE_TO_EQUATIONS[degree]
end

function (::GaussianConvolutionKernel{B})(s) where B # Gaussian style smoothing kernel
    function θ(B::Float64, terms::Int=1000)
        q = exp(-B)
        sum = 1.0
        for n in 1:terms
            term = 2 * q^(n^2)
            sum += term
            if term < 1e-12  # Break if the term is very small
                break
            end
        end
        return sum
    end
    function f(x::Float64, B::Float64)
        return 1 / θ(B) * exp(-B * x^2) # 
    end
    return f(s, B)
end